Eq.Ox.conc(temp.C = temp.C,
elevation.m = elevation.m,
bar.press = bar.press,
bar.units = bar.units,
out.DO.meas = out.DO.meas)
}else if (in.DO.meas == "PP"){
fraction <- data$y /
Eq.Ox.conc(temp.C = temp.C,
elevation.m = elevation.m,
bar.press = bar.press,
bar.units = bar.units,
out.DO.meas = "PP")
data$y <- fraction *
Eq.Ox.conc(temp.C = temp.C,
elevation.m = elevation.m,
bar.press = bar.press,
bar.units = bar.units,
out.DO.meas = out.DO.meas)
}else if(in.DO.meas == "mg/L"){
data$y <- data$y
}else{
stop("invalid 'in.DO.meas' argument:
must be 'pct', 'PP', or 'mg/L' ")
}
if(out.DO.meas == "mg/L"){
data$y <- system.vol * data$y
# Now data$y in units of mg, not mg/L #
}else if(out.DO.meas == "PP"){
# converting MR to PP units #
data$y <- DO.unit.convert(x = data$y,
DO.units.in = "mg/L",
DO.units.out = "PP",
bar.units.in = "atm",
bar.units.out = PP.units)
}else if(out.DO.meas == "pct"){
data$y <- fraction * 100
}
system.vol = 1
time.units = "sec"
bar.units = "atm"
orig = "1970-01-01 00:00:00 UTC"
start.idx <- as.POSIXct((start.idx), origin = orig)
stop.idx <- as.POSIXct((stop.idx), origin = orig)
## make sure num of start and stop indices agree ##
if (length(start.idx) != length(stop.idx)){
stop ("number of start times not equal
to number of stop times")
}
## set time denominator based on specified time.units ##
if(time.units == "sec"){
t.denom <- 1
}else if(time.units == "min"){
t.denom <- 60
}else if(time.units == "hr"){
t.denom <- 3600
}
## set response variable ##
data$y <- eval(parse(text = paste("data$", DO.var.name, sep = "")))
## set time variable ##
data$x <- eval(parse(text = paste("data$", time.var.name, sep = "")))
## set background DO consumption rate ##
if(is.null(background.indices) == TRUE){
bgd.slope.int <- background.consumption
bgd.slope.slope <- 0
}else if(is.null(background.indices) == FALSE) {
if(length(background.indices) < 2){
stop("background.indices must be NULL or have a length >= 2")
}else{
## if there are multiple background calibrations ##
bgd.mod <- lm(background.consumption ~
as.POSIX.ct(background.indices))
bgd.slope.int <- bgd.mod$coefficients[1]
bgd.slope.slope <- bgd.mod$coefficients[2]
}
}
if(is.null(bar.press) == FALSE &&
is.null(elevation.m) == FALSE){
stop("Either 'bar.press' or 'elevation.m' should be NULL")
}
## barometric pressure ##
if(is.null(bar.press) == FALSE){
if(is.character(bar.press) == TRUE){
bar.press <- eval(parse(
text = paste("data$",
bar.press, sep = "")))
}else if(is.numeric(bar.press) == TRUE){
bar.press <- bar.press
}else{
stop("'bar.press' must be 'NULL', numeric, or
the col.name for barometric pressure")
}
}
## Temperature ##
if (is.character(temp.C) == TRUE){
temp.C <- eval(parse(
text = paste("data$", temp.C, sep = "")))
}else if(is.numeric(temp.C) == TRUE){
temp.C <- temp.C
}else{
stop("invalid temp.C argument")
}
# DO sat conversions #
if (in.DO.meas == "pct"){
data$y <- (data$y /100) *
Eq.Ox.conc(temp.C = temp.C,
elevation.m = elevation.m,
bar.press = bar.press,
bar.units = bar.units,
out.DO.meas = out.DO.meas)
}else if (in.DO.meas == "PP"){
fraction <- data$y /
Eq.Ox.conc(temp.C = temp.C,
elevation.m = elevation.m,
bar.press = bar.press,
bar.units = bar.units,
out.DO.meas = "PP")
data$y <- fraction *
Eq.Ox.conc(temp.C = temp.C,
elevation.m = elevation.m,
bar.press = bar.press,
bar.units = bar.units,
out.DO.meas = out.DO.meas)
}else if(in.DO.meas == "mg/L"){
data$y <- data$y
}else{
stop("invalid 'in.DO.meas' argument:
must be 'pct', 'PP', or 'mg/L' ")
}
if(out.DO.meas == "mg/L"){
data$y <- system.vol * data$y
# Now data$y in units of mg, not mg/L #
}else if(out.DO.meas == "PP"){
# converting MR to PP units #
data$y <- DO.unit.convert(x = data$y,
DO.units.in = "mg/L",
DO.units.out = "PP",
bar.units.in = "atm",
bar.units.out = PP.units)
}else if(out.DO.meas == "pct"){
data$y <- fraction * 100
}
for(i in 1:length(start.idx)){
data$adj.y <- data$y - ((as.numeric(data$x) -
as.numeric(start.idx[i]))*(
(as.numeric(data$x) * bgd.slope.slope) +
bgd.slope.int))
}
View(data)
dd<-data[std.time>=as.POSIXct("2015-07-03 03:30:00"),]
dd<-data[data$std.time>=as.POSIXct("2015-07-03 03:30:00"),]
View(dd)
dd<-data[data$std.time>=as.POSIXct("2015-07-03 03:50:00"),]
View(dd)
data$adj.y <- rep(NA, 1:length(data[,1]))
data$adj.y <- rep(NA, length(data[,1]))
View(data)
data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), adj.y] <-
data$y- ((as.numeric(data$x) -
as.numeric(start.idx[i]))*(
(as.numeric(data$x) * bgd.slope.slope) +
bgd.slope.int))
data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), data$adj.y] <-
data$y- ((as.numeric(data$x) -
as.numeric(start.idx[i]))*(
(as.numeric(data$x) * bgd.slope.slope) +
bgd.slope.int))
for(i in 1:length(start.idx)){
data$adj.y <- rep(0, length(data[,1]))
data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), data$adj.y] <-
data$y- ((as.numeric(data$x) -
as.numeric(start.idx[i]))*(
(as.numeric(data$x) * bgd.slope.slope) +
bgd.slope.int))
}
for(i in 1:length(start.idx)){
data$adj.y <- rep(0, length(data[,1]))
data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), adj.y] <-
data$y- ((as.numeric(data$x) -
as.numeric(start.idx[i]))*(
(as.numeric(data$x) * bgd.slope.slope) +
bgd.slope.int))
}
for(i in 1:length(start.idx)){
data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), adj.y] <-
data$y- ((as.numeric(data$x) -
as.numeric(start.idx[i]))*(
(as.numeric(data$x) * bgd.slope.slope) +
bgd.slope.int))
}
data$adj.y <- rep(0, length(data[,1]))
for(i in 1:length(start.idx)){
data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), adj.y] <-
data$y- ((as.numeric(data$x) -
as.numeric(start.idx[i]))*(
(as.numeric(data$x) * bgd.slope.slope) +
bgd.slope.int))
}
for(i in 1:length(start.idx)){
data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), data$adj.y] <-
data$y- ((as.numeric(data$x) -
as.numeric(start.idx[i]))*(
(as.numeric(data$x) * bgd.slope.slope) +
bgd.slope.int))
}
data$adj.y <- rep(0, length(data[,1]))
for(i in 1:length(start.idx)){
data[data$x >= as.POSIXct(start.idx[i]) &&
data$x <= as.POSIXct(stop.idx[i]), data$adj.y] <-
data$y- ((as.numeric(data$x) -
as.numeric(start.idx[i]))*(
(as.numeric(data$x) * bgd.slope.slope) +
bgd.slope.int))
}
str(data$x)
data$x[2] > as.POSIXct(start.idx[1])
dhe<-data[data$x >= as.POSIXct(start.idx[i]) &&
data$x <= as.POSIXct(stop.idx[i]), data$adj.y]
data$x <= as.POSIXct(stop.idx[i]), data$adj.y]
)))
POII{{}))}
mean(2)
dhe<-data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), data$adj.y]
View(dhe)
View(data)
dhe<-data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), adj.y]
dhe<-data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), data$adj.y]
dhe<-data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), data$y]
dhe<-data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), data$y]
dhe<-data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), data$std.time]
View(data)
dhe<-data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), 10]
tab.wid <- length(data[1,])
dhe<-data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), tab.wid]
data$adj.y <- rep(0, length(data[,1]))
tab.wid <- length(data[1,])
for(i in 1:length(start.idx)){
data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), tab.wid] <-
data$y- ((as.numeric(data$x) -
as.numeric(start.idx[i]))*
((as.numeric(data$x) * bgd.slope.slope) +
bgd.slope.int))
}
data$adj.y <- rep(0, length(data[,1]))
data.new <- NULL
for(i in 1:length(start.idx)){
dsn <- data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), ]
dsn$adj.y <- dsn$y- ((as.numeric(dsn$x) -
as.numeric(start.idx[i]))*
((as.numeric(dsn$x) * bgd.slope.slope) +
bgd.slope.int))
data.new <- rbind(data.new, dsn)
}
plot(adj.y ~ x,
data.new = data.new[(data.new$x >= start.idx[1] - 600) &
data.new$x <= (tail(stop.idx,1) + 600),],
type="n",...)
name.num<-as.character(c(1:length(start.idx)))
ms<-list()
MR.summary<-data.new.frame()
for(i in 1:length(start.idx)){
dat <- data.new[data.new$x >= start.idx[i]
& data.new$x <= stop.idx[i],]
# dat$y <- dat$y - (as.numeric(dat$x-
#                     as.numeric(start.idx[i]))*bgd.slope )
mk <- biglm(adj.y ~ x, dat)
ms[[i]] <- mk
points(dat$x, dat$adj.y)
names(ms[[i]])<-paste(names(ms[[i]]), name.num[i], sep=".")
abline(coef(ms[[i]]),
col="red",  lwd = 2)
MR <- coef(mk)[2]*-1
sds <- summary(mk)$mat[2,4]*sqrt(length(dat[,1]))
rsquare <- summary(mk)$rsq
mrrow <- t(c(MR, sds, rsquare))
MR.summary <- rbind(MR.summary,mrrow)
}
names(MR.summary) <- c("MR", "sd.slope", "r.square")
MR.summary[,c(1,2)] <- MR.summary[,c(1,2)] * t.denom
ofthejedi <- list(MR.summary, ms)
data$adj.y <- rep(0, length(data[,1]))
data.new <- NULL
for(i in 1:length(start.idx)){
dsn <- data[data$x >= as.POSIXct(start.idx[i]) &
data$x <= as.POSIXct(stop.idx[i]), ]
dsn$adj.y <- dsn$y- ((as.numeric(dsn$x) -
as.numeric(start.idx[i]))*
((as.numeric(dsn$x) * bgd.slope.slope) +
bgd.slope.int))
data.new <- rbind(data.new, dsn)
}
plot(adj.y ~ x,
data = data.new[(data.new$x >= start.idx[1] - 600) &
data.new$x <= (tail(stop.idx,1) + 600),],
type="n",...)
plot(adj.y ~ x,
data = data.new[(data.new$x >= start.idx[1] - 600) &
data.new$x <= (tail(stop.idx,1) + 600),],
type="n" )
View(data.new)
for(i in 1:length(start.idx)){
dat <- data.new[data.new$x >= start.idx[i]
& data.new$x <= stop.idx[i],]
# dat$y <- dat$y - (as.numeric(dat$x-
#                     as.numeric(start.idx[i]))*bgd.slope )
mk <- biglm(adj.y ~ x, dat)
ms[[i]] <- mk
points(dat$x, dat$adj.y)
names(ms[[i]])<-paste(names(ms[[i]]), name.num[i], sep=".")
abline(coef(ms[[i]]),
col="red",  lwd = 2)
MR <- coef(mk)[2]*-1
sds <- summary(mk)$mat[2,4]*sqrt(length(dat[,1]))
rsquare <- summary(mk)$rsq
mrrow <- t(c(MR, sds, rsquare))
MR.summary <- rbind(MR.summary,mrrow)
}
library(biglm)
for(i in 1:length(start.idx)){
dat <- data.new[data.new$x >= start.idx[i]
& data.new$x <= stop.idx[i],]
# dat$y <- dat$y - (as.numeric(dat$x-
#                     as.numeric(start.idx[i]))*bgd.slope )
mk <- biglm(adj.y ~ x, dat)
ms[[i]] <- mk
points(dat$x, dat$adj.y)
names(ms[[i]])<-paste(names(ms[[i]]), name.num[i], sep=".")
abline(coef(ms[[i]]),
col="red",  lwd = 2)
MR <- coef(mk)[2]*-1
sds <- summary(mk)$mat[2,4]*sqrt(length(dat[,1]))
rsquare <- summary(mk)$rsq
mrrow <- t(c(MR, sds, rsquare))
MR.summary <- rbind(MR.summary,mrrow)
}
name.num<-as.character(c(1:length(start.idx)))
ms<-list()
MR.summary<-data.frame()
for(i in 1:length(start.idx)){
dat <- data.new[data.new$x >= start.idx[i]
& data.new$x <= stop.idx[i],]
# dat$y <- dat$y - (as.numeric(dat$x-
#                     as.numeric(start.idx[i]))*bgd.slope )
mk <- biglm(adj.y ~ x, dat)
ms[[i]] <- mk
points(dat$x, dat$adj.y)
names(ms[[i]])<-paste(names(ms[[i]]), name.num[i], sep=".")
abline(coef(ms[[i]]),
col="red",  lwd = 2)
MR <- coef(mk)[2]*-1
sds <- summary(mk)$mat[2,4]*sqrt(length(dat[,1]))
rsquare <- summary(mk)$rsq
mrrow <- t(c(MR, sds, rsquare))
MR.summary <- rbind(MR.summary,mrrow)
}
library(rMR)
data(fishMR)
bgd.resp <-
background.resp(fishMR, "DO.mgL",
start.time = "2015-07-02 16:05:00",
end.time = "2015-07-02 16:35:00",
ylab = "DO (mg/L)", xlab = "time (min)")
bg.slopea <- bgd.resp$mat[2]
starts <- c("2015-07-03 01:15:00", "2015-07-03 02:13:00",
"2015-07-03 03:02:00", "2015-07-03 03:50:00",
"2015-07-03 04:50:00")
stops <- c("2015-07-03 01:44:00", "2015-07-03 02:35:30",
"2015-07-03 03:25:00", "2015-07-03 04:16:00",
"2015-07-03 05:12:00")
metR <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts,
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = bg.slopea,
ylim=c(6.25, 6.5))
plot.raw(fishMR, DO.var.name = "DO.mgL",
start.time = "2015-07-03 03:30:00",
end.time = "2015-07-03 04:16:00", ylim = c(6.25,6.5))
bg.slope.a <- bgd.resp$mat[2]
bg.slope.b <-bg.slope.a -0.0002
metRa <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts, time.units = "min",
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = c(bg.slope.a, bg.slope.b),
background.indices = c("2015-07-02 16:20:00",
"2015-07-03 06:00:00")
ylim=c(6.25, 6.5))
metRa <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts, time.units = "min",
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = c(bg.slope.a, bg.slope.b),
background.indices = c("2015-07-02 16:20:00",
"2015-07-03 06:00:00"),
ylim=c(6.25, 6.5))
library(rMR)
data(fishMR)
bgd.resp <-
background.resp(fishMR, "DO.mgL",
start.time = "2015-07-02 16:05:00",
end.time = "2015-07-02 16:35:00",
ylab = "DO (mg/L)", xlab = "time (min)")
bg.slope.a <- bgd.resp$mat[2]
bg.slope.b <-bg.slope.a -0.0002
starts <- c("2015-07-03 01:15:00", "2015-07-03 02:13:00",
"2015-07-03 03:02:00", "2015-07-03 03:50:00",
"2015-07-03 04:50:00")
stops <- c("2015-07-03 01:44:00", "2015-07-03 02:35:30",
"2015-07-03 03:25:00", "2015-07-03 04:16:00",
"2015-07-03 05:12:00")
metR <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts, time.units = "min"
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = bg.slopea,
ylim=c(6.25, 6.5))
metR <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts, time.units = "min",
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = bg.slopea,
ylim=c(6.25, 6.5))
metRa <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts, time.units = "min",
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = c(bg.slope.a, bg.slope.b),
background.indices = c("2015-07-02 16:20:00",
"2015-07-03 06:00:00"),
ylim=c(6.25, 6.5))
bg.slope.b <-bg.slope.a -0.0001
metRa <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts, time.units = "min",
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = c(bg.slope.a, bg.slope.b),
background.indices = c("2015-07-02 16:20:00",
"2015-07-03 06:00:00"),
ylim=c(6.25, 6.5))
metR <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts, time.units = "min",
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = bg.slopea,
ylim=c(6.25, 7.75))
metRa <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts, time.units = "min",
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = c(bg.slope.a, bg.slope.b),
background.indices = c("2015-07-02 16:20:00",
"2015-07-03 06:00:00"),
ylim=c(6.25, 7.75))
metR$MR.summary
metR <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts, time.units = "hr",
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = bg.slopea,
ylim=c(6.25, 7.75))
metRa <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts, time.units = "hr",
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = c(bg.slope.a, bg.slope.b),
background.indices = c("2015-07-02 16:20:00",
"2015-07-03 06:00:00"),
ylim=c(6.25, 7.75))
metR$MR.summary
metRa$MR.summary
metR$MR.summary-metRa$MR.summary
starts <- c("2015-07-03 01:15:00", "2015-07-03 02:13:00",
"2015-07-03 03:02:00", "2015-07-03 03:50:00",
"2015-07-03 04:50:00")
stops <- c("2015-07-03 01:50:00", "2015-07-03 02:35:30",
"2015-07-03 03:25:00", "2015-07-03 04:16:00",
"2015-07-03 05:12:00")
metRb <- MR.loops(data = fishMR, DO.var.name ="DO.mgL",
start.idx = starts,
stop.idx = stops, time.var.name = "std.time",
temp.C = "temp.C", elevation.m = 1180,
bar.press = NULL, in.DO.meas = "mg/L",
background.consumption = bg.slopea,
ylim=c(6,8))
